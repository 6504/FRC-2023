// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.SparkMaxLimitSwitch;
import com.revrobotics.SparkMaxLimitSwitch.Type;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
public static final double wheelDiameter = 6.00;
private SparkMaxLimitSwitch reverseLimit; 

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax rolley;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private Timer forwardLimitTimer = new Timer();
    
    /**
    *
    */
    public Intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rolley = new CANSparkMax(15, MotorType.kBrushed);
        rolley.setInverted(true);
        reverseLimit = rolley.getReverseLimitSwitch(Type.kNormallyClosed);
        reverseLimit.enableLimitSwitch(true);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        forwardLimitTimer.reset();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        
        SmartDashboard.putBoolean("Holding Cargo?", reverseLimit.isPressed());

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void spin(double speed) {
        if (speed < 0) {
            // Spinning backwards: reset the forward limit timer
            forwardLimitTimer.reset();
            rolley.set(speed);
        } else if (speed > 0) {
            // Spinning forward: start the timer
            forwardLimitTimer.start();

            // Don't let it spin forward for too long
            if (forwardLimitTimer.hasElapsed(0.1))
            {
                rolley.set(0);
                forwardLimitTimer.stop();
            }
            else
            {
                rolley.set(speed);
            }
        } else {
            // Stopped
            rolley.set(0);
        }
    }
}

