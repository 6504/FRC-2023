// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;

import com.revrobotics.CANSparkMax;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax.SoftLimitDirection;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Wrist extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
public static final double wheelDiameter = 6.00;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax rotator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput;
    private SparkMaxPIDController m_pidController;

    /**
    *
    */
    public Wrist() {
        
        rotator = new CANSparkMax(17, MotorType.kBrushless);

        rotator.getEncoder().setPosition(0);

        rotator.setInverted(false);
        rotator.setIdleMode(IdleMode.kBrake);
        rotator.setOpenLoopRampRate(0.5);
        rotator.setClosedLoopRampRate(0.5);

        rotator.enableSoftLimit(SoftLimitDirection.kForward, true);
        rotator.enableSoftLimit(SoftLimitDirection.kReverse, true);

        rotator.setSoftLimit(SoftLimitDirection.kForward, (float)0.0);
        rotator.setSoftLimit(SoftLimitDirection.kReverse, (float)Constants.kMinWristPosition);



        m_pidController = rotator.getPIDController();

        // PID coefficients
        kP = 0.05; 
        kI = 0.0001;
        kD = 0.0; 
        kIz = 0; 
        kFF = 0; 
        kMaxOutput = 1; 
        kMinOutput = -1;

        // set PID coefficients
        m_pidController.setP(kP);
        m_pidController.setI(kI);
        m_pidController.setD(kD);
        m_pidController.setIZone(kIz);
        m_pidController.setFF(kFF);
        m_pidController.setOutputRange(kMinOutput, kMaxOutput);

        m_pidController.setReference(rotator.getEncoder().getPosition(), CANSparkMax.ControlType.kPosition);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("WristPosition", rotator.getEncoder().getPosition());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    
    public void move(double speed) {
        if (Math.abs(speed) < 0.05) {
            m_pidController.setReference(rotator.getEncoder().getPosition(), CANSparkMax.ControlType.kPosition);
        } else {
            rotator.set(speed);
        }
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

