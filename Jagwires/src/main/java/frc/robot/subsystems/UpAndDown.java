// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax.SoftLimitDirection;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.REVPhysicsSim;
import com.revrobotics.SparkMaxPIDController;

import edu.wpi.first.math.system.plant.DCMotor;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class UpAndDown extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
public static final double wheelDiameter = 6.00;
private double m_setPosition=0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput;
private SparkMaxPIDController m_pidController;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax centerLift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public UpAndDown() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
       
        centerLift = new CANSparkMax(16, MotorType.kBrushless);

        centerLift.getEncoder().setPosition(0);

        centerLift.setInverted(true);
        centerLift.setIdleMode(IdleMode.kBrake);
        centerLift.setOpenLoopRampRate(0.5);
        centerLift.setClosedLoopRampRate(0.5);
        m_pidController = centerLift.getPIDController();

        // Lift safety
        centerLift.enableSoftLimit(SoftLimitDirection.kForward, true);
        centerLift.enableSoftLimit(SoftLimitDirection.kReverse, true);

        centerLift.setSoftLimit(SoftLimitDirection.kForward, (float)Constants.kLiftMaxPosition);
        centerLift.setSoftLimit(SoftLimitDirection.kReverse, (float) 0);
       
        // PID coefficients
        kP = 0.8; 
        kI = 0.01;
        kD = 0.01; 
        kIz = 0; 
        kFF = 0; 
        kMaxOutput = 0.3; 
        kMinOutput = -0.3;

        // set PID coefficients
        m_pidController.setP(kP);
        m_pidController.setI(kI);
        m_pidController.setD(kD);
        m_pidController.setIZone(kIz);
        m_pidController.setFF(kFF);
        m_pidController.setOutputRange(kMinOutput, kMaxOutput);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("liftEncoder",centerLift.getEncoder().getPosition());

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // positive means lift goes up
    // negative means lift goes down
    public void move(double power) {
        //checking if lift is too high
        if(isTooHigh() == true && power > 0) { //if lift is too high and driver tries to move lift up
            
            power = 0; //stop from moving up
        } 
        else if(isTooLow() == true && power < 0) { //if lift is too low and driver tries to move lift down
            
            power = 0; //stop from moving down
        }



        if (Math.abs(power) < 0.1) {
            m_pidController.setReference(centerLift.getEncoder().getPosition(), CANSparkMax.ControlType.kPosition);
        } else {
            centerLift.set(power); //if lift is not too high or if moving down, keep going
        }
        
    }
public void GotoPosition(double position){
    if(position>=0 && position<Constants.kLiftMaxPosition) {
        m_pidController.setReference(position, CANSparkMax.ControlType.kPosition);
        m_setPosition=position;
    }
    else
    {
        System.out.println("GoToPosition() " + position + " out of range");
    }

}
    
    public void simulationInit() {
        REVPhysicsSim.getInstance().addSparkMax(centerLift, DCMotor.getNEO(1));
    }

    public boolean isTooHigh(){

        return (centerLift.getEncoder().getPosition() > Constants.kLiftMaxPosition);

    }
    public boolean isTooLow(){

        return (centerLift.getEncoder().getPosition() < 0);

    }
public boolean IsAtPosition(){
   return Math.abs(centerLift.getEncoder().getPosition()-(m_setPosition)) < 0.1;
}
public double getLiftPosition(){
    return centerLift.getEncoder().getPosition();

}
}

