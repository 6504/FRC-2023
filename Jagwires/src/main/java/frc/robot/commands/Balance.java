// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
import frc.robot.subsystems.DriveTrain;

import java.util.function.DoubleSupplier;

import com.revrobotics.CANSparkMax.IdleMode;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Balance extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private DriveTrain m_DriveTrain;

    private boolean isBalanced = false;
    private Timer m_timer = new Timer();

    public Balance(DriveTrain driveTrain) {
        m_DriveTrain = driveTrain;
        addRequirements(m_DriveTrain);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        m_DriveTrain.setIdleMode(IdleMode.kBrake);
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        double pitchAngleDegrees = m_DriveTrain.getPitch();
        
        if (Math.abs(pitchAngleDegrees) > Constants.kOffBalanceThresholdDegrees)
        { 
            double pitchAngleRadians = pitchAngleDegrees * (Math.PI / 180.0);
            double xAxisRate = Math.sin(pitchAngleRadians) * -Constants.kBalancePowerMultiplier;

            m_DriveTrain.POVdrive(xAxisRate, 0);
        }
        else
        {
            m_DriveTrain.POVdrive(0, 0);
            m_timer.start();
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_DriveTrain.setIdleMode(IdleMode.kCoast);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
